[{"body":"\nThis site is built completely from JSON data. So, before we start generating our site, we need to get our data in order with a little help from some <a href=\"https://github.com/nonplain\" rel=\"noreferrer\" target=\"_blank\">`nonplain` &#x2197;</a> tools.\n\n## Notes2JSON with nonplain\n\n`nonplain` and `nonplain-md-link` make building markdown notes into webpages simple by providing composable tools for parsing groups of \"nonplain\" (plaintext + frontmatter) files, transforming them as needed, and then exporting them. Loading the files, parsing them, transforming their body content and metadata, and exporting them to JSON is possible in just **60 lines** of code.\n\n### The notes\n\nFirst, we need a couple of files to build our site out of. You can do this yourself. For the purposes of this tutorial, make sure to create your files with a `title` property in the frontmatter:\n\n```md\n---\ntitle: The title I want my page to be\n---\n```\n\nOptionally, specify a permalink:\n\n```md\n---\ntitle: This is the home page\npermalink: /\n---\n```\n\nThis metadata will help us name our pages and navigate to them reliably on the web.\n\n### The code\n\nThe full code can be found <a href=\"https://github.com/nonplain/js-examples/tree/master/11ty-markdown-notes\" rel=\"noreferrer\" target=\"_blank\">on GitHub &#x2197;</a>, so you can go read the full `build-notes.js` file there. In the meantime, we'll walk through each section of that code and talk about what it does.\n\n#### Dependencies\n\nFirst, we need to import a few packages. We'll need the built-in Node.js `path` and `url` packages, as well as <a href=\"https://www.npmjs.com/package/slug\" rel=\"noreferrer\" target=\"_blank\">`slug` &#x2197;</a>, an excellent package from <a href=\"https://www.npmjs.com/package/slug\" rel=\"noreferrer\" target=\"_blank\">Rich Trott &#x2197;</a> that makes valid permalinks easy. Finally, we'll import <a href=\"https://github.com/nonplain/nonplain.js\" rel=\"noreferrer\" target=\"_blank\">`nonplain` &#x2197;</a> to help us work with our note files and <a href=\"https://github.com/nonplain/nonplain-md-link.js\" rel=\"noreferrer\" target=\"_blank\">`nonplain-md-link` &#x2197;</a> to help us make sure our wiki-style links work on the web.\n\n```js\nconst path = require('path');\nconst URL = require('url').URL;\nconst slug = require('slug');\n\nconst { Files } = require('nonplain');\nconst { Link, regex } = require('nonplain-md-link');\n```\n\n#### Helper functions\n\nNext, we need two helper functions. One will help us detect URLs pointing to external sites so that we can treat them accordingly, and the other will use `nonplain-md-link` to transform all links in our markdown to work on our site, including \"wiki-style\" links.\n\nFirst, our external URL detector:\n\n```js\nfunction isFullUrl(href) {\n  try {\n    new URL(href);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n```\n\nThis function uses the built-in `url` package from Node.js to check whether a given string is a valid, full URL. If it is, we can assume it points to an external site. If it's not, we can assume it's a <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#absolute_urls_vs_relative_urls\" rel=\"noreferrer\" target=\"_blank\">relative path &#x2197;</a> and that it links to an internal page.\n\nNow, we need to transform some links:\n\n```js\nfunction markdownLinksToHTML(content) {\n  return content.replace(regex.links.all, (linkStr) => {\n    const link = new Link(linkStr);\n\n    const isExternalUrl = isFullUrl(link.path);\n\n    if (isExternalUrl) {\n      const externalLinkArrow = '&#x2197;';\n      link.innerText = link.innerText + ' ' + externalLinkArrow;\n\n      return link.composeHTML('rel=\"noreferrer\" target=\"_blank\"');\n    } else {\n      link.path = '/' + slug(path.parse(link.path).name) + '/';\n\n      return link.composeHTML();\n    }\n  });\n}\n```\n\nThis function uses <a href=\"https://github.com/nonplain/nonplain-md-link.js\" rel=\"noreferrer\" target=\"_blank\">`nonplain-md-link` &#x2197;</a> to <a href=\"https://github.com/nonplain/nonplain-md-link.js#regex\" rel=\"noreferrer\" target=\"_blank\">match &#x2197;</a> and <a href=\"https://github.com/nonplain/nonplain-md-link.js#initialization\" rel=\"noreferrer\" target=\"_blank\">parse &#x2197;</a> all links in our file <a href=\"https://github.com/nonplain/nonplain.js#what-the-body-is-the-content\" rel=\"noreferrer\" target=\"_blank\">body &#x2197;</a>. We'll call this function from within the <a href=\"https://github.com/nonplain/nonplain.js#transforming-nonplain-file-data\" rel=\"noreferrer\" target=\"_blank\">`transform()` &#x2197;</a> method, passing the body of our file to it. This will ensure that all markdown and wiki-style links are working properly on our site.\n\n#### Building notes\n\nThis is the fun part, where we put everything together using `nonplain.js`.\n\n```js\n(async () => {\n  const print = console.log.bind(console, 'notes-build:');\n\n  print('Building notes...');\n\n  const files = await new Files().load('../notes/**/*.md');\n\n  files.transform(({ body, metadata }) => {\n    const newBody = markdownLinksToHTML(body);\n\n    const newMetadata = {\n      ...metadata,\n      permalink: metadata.permalink || '/' + slug(metadata.title) + '/',\n    };\n\n    return {\n      body: newBody,\n      metadata: newMetadata,\n    };\n  });\n\n  await files.export2JSON('src/_data/notes.json');\n\n  print('Done!', '\\n');\n})();\n```\n\nThis is a <a href=\"https://stackoverflow.com/questions/7515293/what-are-self-calling-functions-in-javascript\" rel=\"noreferrer\" target=\"_blank\">self-calling function &#x2197;</a>, so it runs when the file is executed by our `npm run notes` script. Inside this function, we print a message stating that notes are being built, load the notes into a `Files` instance to parse them, run a `transform()` on our files, export our files to JSON, and print a closing message.\n\nTo understand how this function works in more detail, see the links below:\n\n- <a href=\"https://github.com/nonplain/nonplain.js#parsing-nonplain-files\" rel=\"noreferrer\" target=\"_blank\">Parsing files with `nonplain.js` &#x2197;</a>\n  ```js\n  const files = await new Files().load('../notes/**/*.md');\n  ```\n- <a href=\"https://github.com/nonplain/nonplain.js#transforming-nonplain-file-data\" rel=\"noreferrer\" target=\"_blank\">Transforming file data with `nonplain.js` &#x2197;</a>\n  ```js\n  files.transform(({ body, metadata }) => {\n    const newBody = markdownLinksToHTML(body);\n\n    const newMetadata = {\n      ...metadata,\n      permalink: metadata.permalink || slug(metadata.title),\n    };\n\n    return {\n      body: newBody,\n      metadata: newMetadata,\n    };\n  });\n  ```\n- <a href=\"https://github.com/nonplain/nonplain.js#export2json\" rel=\"noreferrer\" target=\"_blank\">Exporting file data to JSON with `nonplain.js` &#x2197;</a>\n  ```js\n  await files.export2JSON('src/_data/notes.json');\n  ```\n  \nNow, we can parse, transform, and export all of our note files by running this file.\n\n```\n$ node build-notes.js\n```\n\nWhen we put our site together, feel free to use <a href=\"https://docs.npmjs.com/cli/v6/using-npm/scripts\" rel=\"noreferrer\" target=\"_blank\">NPM scripts &#x2197;</a> to make building as easy as `npm run notes`.\n\n**Next:** <a href=\"/putting-it-all-together-with-11ty/\">Putting it all together with 11ty</a>\n","metadata":{"file":{"root":"","dir":"../notes","base":"Building site data with nonplain.md","ext":".md","name":"Building site data with nonplain"},"title":"Building site data with nonplain","date":"2021-03-11T00:00:00.000Z","permalink":"/building-site-data-with-nonplain/"}},{"body":"\nThe process of building this site can be split into two phases:\n\n1. <a href=\"/building-site-data-with-nonplain/\">Building site data with nonplain</a>\n2. <a href=\"/putting-it-all-together-with-11ty/\">Putting it all together with 11ty</a>\n","metadata":{"file":{"root":"","dir":"../notes","base":"How to make this site.md","ext":".md","name":"How to make this site"},"title":"How to make this site","date":"2021-03-11T00:00:00.000Z","permalink":"/how-to-make-this-site/"}},{"body":"\nThis site was made by exporting markdown notes to JSON with <a href=\"https://github.com/nonplain/nonplain.js\" rel=\"noreferrer\" target=\"_blank\">**nonplain.js** &#x2197;</a> and then using that data to generate webpages with <a href=\"https://www.11ty.dev/\" rel=\"noreferrer\" target=\"_blank\">**11ty** &#x2197;</a>.\n\nThe result is a lightning-fast JAMstack website built entirely from markdown notes ðŸ¤“\n\nFeel free to check out the source code <a href=\"https://github.com/nonplain/js-examples/tree/master/11ty-markdown-notes\" rel=\"noreferrer\" target=\"_blank\">on GitHub &#x2197;</a>.\n\n## A few stats\n\n- This entire site is built from just **180 lines of code**, including whitespace and JSON data\n- It took just **30 minutes** to put this site together, from start to finish\n- This page weighs just **~2kb**\n- This site is **accessible**, **mobile-friendly**, and **cool**\n\n## A few features\n\n- **Automatic external links.** See all those links with \"&#x2197;\" next to them? Those are external links. External links automatically open in new tabs, just like they should, thanks to <a href=\"https://github.com/nonplain/nonplain-md-link.js\" rel=\"noreferrer\" target=\"_blank\">`nonplain-md-link` &#x2197;</a>.\n- **Valid permalinks**. No unexpected `404`s here. All note titles are turned into valid permalinks and then injected into each note's metadata via <a href=\"https://github.com/nonplain/nonplain.js#transforming-nonplain-file-data\" rel=\"noreferrer\" target=\"_blank\">`transform()` &#x2197;</a>.\n- **Easy development cycle.** Just write notes, build, and deploy.\n\n## Do it yourself\n\n- **<a href=\"/how-to-make-this-site/\">How to make this site</a>:**\n  1. <a href=\"/building-site-data-with-nonplain/\">Building site data with nonplain</a>\n  2. <a href=\"/putting-it-all-together-with-11ty/\">Putting it all together with 11ty</a>\n\n<div style=\"display: flex; flex-direction: row; margin-top: 36px;\">\n  <span style=\"font-size: 1.5em; margin-right: 9px;\">ðŸ‘‰</span>\n  <span>To see this concept implemented on a live website, check out <a href=\"https://jaredgorski.org/notes\" rel=\"noreferrer\" target=\"_blank\">jaredgorski.org/notes &#x2197;</a>.</span>\n</div>\n","metadata":{"file":{"root":"","dir":"../notes","base":"index.md","ext":".md","name":"index"},"title":"nonplain + 11ty = web notes","date":"2021-03-11T00:00:00.000Z","permalink":"/"}},{"body":"\n**Note:** if you haven't read <a href=\"/building-site-data-with-nonplain/\">part 1</a> of this guide, go read that first!\n\n---\n\nNow that we've exported our files to JSON, we can take advantage of 11ty's pagination feature to <a href=\"https://www.11ty.dev/docs/pages-from-data/\" rel=\"noreferrer\" target=\"_blank\">create pages from our data &#x2197;</a>.\n\nTo get everything working, we just need to:\n\n- <a href=\"https://www.11ty.dev/docs/getting-started/\" rel=\"noreferrer\" target=\"_blank\">Install 11ty &#x2197;</a>\n- <a href=\"https://www.11ty.dev/docs/data-global/\" rel=\"noreferrer\" target=\"_blank\">Add our JSON data to 11ty &#x2197;</a>\n- <a href=\"https://www.11ty.dev/docs/pages-from-data/\" rel=\"noreferrer\" target=\"_blank\">Build pages from our JSON data &#x2197;</a>\n- <a href=\"https://www.11ty.dev/docs/data-computed/\" rel=\"noreferrer\" target=\"_blank\">Compute page titles for each file &#x2197;</a>\n- **Optional:** Create a basic <a href=\"https://www.11ty.dev/docs/layouts/\" rel=\"noreferrer\" target=\"_blank\">layout &#x2197;</a> to make our site look nice\n\nHere's what our site's files will look like when we're done:\n\n```\nsite/\nâ”œâ”€ .eleventy.js\nâ”œâ”€ build-notes.js\nâ”œâ”€ src/\nâ”‚  â”œâ”€ site-pages.njk\nâ”‚  â”œâ”€ _data/\nâ”‚  â”‚  â”œâ”€ eleventyComputed.js\nâ”‚  â”‚  â”œâ”€ notes.json\nâ”‚  â”œâ”€ _layouts/\nâ”‚  â”‚  â”œâ”€ base.njk\n```\n\n## Install 11ty\n\nFirst, create a directory to contain your 11ty site and install 11ty.\n\nThen, create an `.eleventy.js` configuration file in the root of your project so that 11ty knows where your site's source code lives.\n\n`.eleventy.js`:\n\n```js\nmodule.exports = {\n  dir: {\n    input: 'src',\n  },\n};\n```\n\nOnce that's all done, we can begin building.\n\n## Building pages from our JSON data\n\nTo <a href=\"https://www.11ty.dev/docs/pages-from-data/\" rel=\"noreferrer\" target=\"_blank\">build our pages from our JSON data &#x2197;</a>, we'll take advantage of 11ty's pagination feature.\n\nFirst, we'll create a `.njk` <a href=\"https://www.11ty.dev/docs/languages/nunjucks/\" rel=\"noreferrer\" target=\"_blank\">template &#x2197;</a> at `src/site-pages.njk` to tell 11ty how to paginate our data.\n\n`src/site-pages.njk`:\n\n{% raw %}\n```js\n---js\n{\n  pagination: {\n      data: 'notes',\n      size: 1,\n      alias: 'note',\n  },\n  permalink: '/{{ note.metadata.permalink }}/',\n  templateEngineOverride: 'njk, md',\n}\n---\n\n# {{ note.metadata.title | safe }}\n\n{{ note.body | safe }}\n```\n{% endraw %}\n\nThis file tells 11ty to paginate the \"`notes`\" data one record at a time, aliasing each record as `note` so that we can reference it from within the template. It also supplies each note's `metadata.permalink` property (added in `transform()`) to 11ty so that our pages show up at the right URLs.\n\nFinally, we use <a href=\"https://www.11ty.dev/docs/languages/#overriding-the-template-language\" rel=\"noreferrer\" target=\"_blank\">`templateEngineOverride` &#x2197;</a> to tell 11ty to process this file first as a nunjucks template, and then as a markdown template. This is because we are injecting each note's `metadata.title` and `body` into the template, so we need the template to be built before the markdown in our note is processed.\n\n## Add JSON data to 11ty\n\nAs for how we get our JSON data to show up as `notes` in 11ty, you may have noticed that our `files.export2JSON()` call took a filepath as an argument. This is the filepath to 11ty's default <a href=\"https://www.11ty.dev/docs/data-global/\" rel=\"noreferrer\" target=\"_blank\">global data &#x2197;</a> directory. We export our JSON file to this directory so that 11ty has access to the data. Once the JSON file exists in our site's `_data` directory, 11ty lets us access the data via its filename.\n\n## Compute page titles\n\nOnce our `notes.json` file has been compiled and exported to `src/_data`, we just need to make sure our webpages will have the correct titles. We can hoist each note file's `metadata.title` property to the top level of each page's data using 11ty's <a href=\"https://www.11ty.dev/docs/data-computed/\" rel=\"noreferrer\" target=\"_blank\">computed data &#x2197;</a> feature.\n\n`src/_data/eleventyComputed.js`:\n\n```js\nmodule.exports = {\n  title: data => data.note\n    ? data.note.metadata.title\n    : data.title,\n};\n```\n\nNow, 11ty will use our JSON data to create all of our pages, with correct page titles.\n\n## Making things look nice with a layout\n\nOur site should be working at this point! ðŸŽ‰ However, it probably looks pretty bland. To take it up a notch, add a <a href=\"https://www.11ty.dev/docs/layouts/\" rel=\"noreferrer\" target=\"_blank\">layout template &#x2197;</a> to your site to wrap each page's content. You can check out the `src/_layouts/base.njk` file in the repo for this site if you'd like to see how this one was done, but here's a quick overview.\n\nFirst, create a layout template at `src/_layouts` (or `src/_includes`). A simple layout template might look like this:\n\n`src/_layouts/base.njk`:\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n    <title>{{- title | safe -}}</title>\n    \n    <style>\n      /* Add some CSS to make everything look nice */\n    </style>\n  </head>\n  <body>\n    <main>\n      {{ content | safe }}\n    </main>\n  </body>\n</html>\n```\n\nThen, make sure 11ty can see your layouts by adding the `_layouts` directory to your `.eleventy.js` configuration:\n\n`.eleventy.js`:\n\n```js\nmodule.exports = {\n  dir: {\n    input: 'src',\n    layouts: '_layouts',\n  },\n};\n```\n\nFinally, make sure 11ty knows that you want your generated pages to use this layout by adding it to the frontmatter of your `site-pages.njk` template:\n\n`src/site-pages.njk`:\n\n{% raw %}\n```js\n---js\n{\n  layout: 'base.njk',\n  pagination: {\n      data: 'notes',\n      size: 1,\n      alias: 'note',\n  },\n  permalink: '/{{ note.metadata.permalink }}/',\n  templateEngineOverride: 'njk, md',\n}\n---\n\n# {{ note.metadata.title | safe }}\n\n{{ note.body | safe }}\n```\n{% endraw %}\n\n## That's it!\n\nNow gaze upon your glorious new web notes! âœ¨\n","metadata":{"file":{"root":"","dir":"../notes","base":"Putting it all together with 11ty.md","ext":".md","name":"Putting it all together with 11ty"},"title":"Putting it all together with 11ty","date":"2021-03-11T00:00:00.000Z","permalink":"/putting-it-all-together-with-11ty/"}}]
